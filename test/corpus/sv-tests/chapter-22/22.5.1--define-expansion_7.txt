============================================
sv-tests/chapter-22/22.5.1--define-expansion_7
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: 22.5.1--define_expansion_7
:description: Test
:should_fail_because: To use a macro defined with arguments, the name of the text macro shall be followed by a list of actual arguments in parentheses, separated by commas.
:tags: 22.5.1
:type: preprocessing
*/
`define D(x,y) initial $display("start", x , y, "end");
`D()

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (ERROR
    (ERROR)
    (subroutine_call
      (tf_call
        (hierarchical_identifier
          (simple_identifier))
        (ERROR
          (simple_identifier))
        (list_of_arguments
          (expression
            (primary
              (hierarchical_identifier
                (simple_identifier))))
          (expression
            (primary
              (hierarchical_identifier
                (simple_identifier)))))))
    (simple_identifier))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (system_tf_call
              (system_tf_identifier)
              (list_of_arguments
                (expression
                  (primary
                    (primary_literal
                      (string_literal))))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))
                (expression
                  (primary
                    (primary_literal
                      (string_literal)))))))))))
  (ERROR
    (ERROR))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier)))))))))

(ERROR)
