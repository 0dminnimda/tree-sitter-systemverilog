============================================
sv-tests/chapter-18/18.5.2--pure-constraint_0
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: pure_constraint_0
:description: pure constraint test
:tags: 18.5.2
:unsynthesizable: 1
*/

virtual class a;
    pure constraint c;
endclass

class a2 extends a;
    rand int b2;
    constraint c { b2 == 5; }
endclass

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (package_or_generate_item_declaration
    (class_declaration
      (class_identifier
        (simple_identifier))
      (class_item
        (constraint_prototype
          (constraint_prototype_qualifier)
          (constraint_identifier
            (constraint_identifier
              (simple_identifier)))))))
  (package_or_generate_item_declaration
    (class_declaration
      (class_identifier
        (simple_identifier))
      (class_type
        (class_identifier
          (simple_identifier)))
      (class_item
        (class_property
          (random_qualifier)
          (data_declaration
            (data_type_or_implicit1
              (data_type
                (integer_atom_type)))
            (list_of_variable_decl_assignments
              (variable_decl_assignment
                (simple_identifier))))))
      (class_item
        (constraint_declaration
          (constraint_identifier
            (constraint_identifier
              (simple_identifier)))
          (constraint_block
            (constraint_block_item
              (constraint_expression
                (expression_or_dist
                  (expression
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))))
                    (expression
                      (primary
                        (primary_literal
                          (integral_number
                            (decimal_number
                              (unsigned_number))))))))))))))))
