============================================
sv-tests/chapter-8/8.26.4--illegal_forward_def_implements
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: illegal_forward_def_implements
:description: implementing forward typedef for an interface class should fail
:should_fail_because: implementing forward typedef for an interface class should fail
:tags: 8.26.4
:type: simulation elaboration
:unsynthesizable: 1
*/
module class_tb ();
	typedef interface class ihello;

	class Hello implements ihello;
		virtual function void hello(ihello::int_t val);
			$display("hello world %d", val);
		endfunction
	endclass

	interface class ihello;
		typedef int int_t;
		pure virtual function void hello(int_t val);
	endclass

	Hello obj;

	initial begin
		obj = new;
		obj.hello();
	end
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (module_declaration
    (module_nonansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_ports))
    (module_item
      (data_declaration
        (type_declaration
          (simple_identifier))))
    (module_item
      (class_declaration
        name: (simple_identifier)
        (interface_class_type
          (simple_identifier))
        (class_item
          (class_method
            (method_qualifier)
            (function_declaration
              (function_body_declaration
                (function_data_type_or_implicit1
                  (data_type_or_void))
                (function_identifier
                  (function_identifier
                    (simple_identifier)))
                (tf_port_list
                  (tf_port_item
                    (data_type_or_implicit
                      (data_type
                        (class_type
                          (simple_identifier)
                          (simple_identifier))))
                    (simple_identifier)))
                (function_statement_or_null
                  (function_statement
                    (statement
                      (statement_item
                        (subroutine_call_statement
                          (subroutine_call
                            (system_tf_call
                              (system_tf_identifier)
                              (list_of_arguments
                                (expression
                                  (primary
                                    (primary_literal
                                      (string_literal))))
                                (expression
                                  (primary
                                    (hierarchical_identifier
                                      (simple_identifier))))))))))))))))))
    (module_item
      (interface_class_declaration
        name: (simple_identifier)
        (interface_class_item)
        (interface_class_item
          (type_declaration
            (data_type
              (integer_atom_type))
            (simple_identifier)))
        (interface_class_item
          (interface_class_method
            (function_prototype
              (data_type_or_void)
              (function_identifier
                (function_identifier
                  (simple_identifier)))
              (tf_port_list
                (tf_port_item
                  (data_type_or_implicit
                    (data_type
                      (simple_identifier)))
                  (simple_identifier))))))))
    (module_item
      (port_declaration
        (interface_port_declaration
          (simple_identifier)
          (list_of_interface_identifiers
            (simple_identifier)))))
    (module_item
      (initial_construct
        (statement_or_null
          (statement
            (statement_item
              (seq_block
                (statement_or_null
                  (statement
                    (statement_item
                      (blocking_assignment
                        (simple_identifier)
                        (class_new)))))
                (statement_or_null
                  (statement
                    (statement_item
                      (subroutine_call_statement
                        (subroutine_call
                          (tf_call
                            (hierarchical_identifier
                              (simple_identifier)
                              (simple_identifier))))))))))))))))
