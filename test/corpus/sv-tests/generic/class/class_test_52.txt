============================================
sv-tests/generic/class/class_test_52
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: class_test_52
:description: Test
:tags: 6.15 8.3
:unsynthesizable: 1
*/
class uvm_sequence_item;
endclass
class how_wide #(type DT=int) extends uvm_sequence_item;
  localparam Max_int = {$bits(DT) - 1{1'b1}};
endclass

module test;
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (package_or_generate_item_declaration
    (class_declaration
      (class_identifier
        (simple_identifier))))
  (package_or_generate_item_declaration
    (class_declaration
      (class_identifier
        (simple_identifier))
      (parameter_port_list
        (parameter_port_declaration
          (list_of_type_assignments
            (type_assignment
              (simple_identifier)
              (data_type
                (integer_atom_type))))))
      (class_type
        (class_identifier
          (simple_identifier)))
      (class_item
        (local_parameter_declaration
          (list_of_param_assignments
            (param_assignment
              (parameter_identifier
                (simple_identifier))
              (constant_param_expression
                (constant_mintypmax_expression
                  (constant_expression
                    (constant_primary
                      (constant_multiple_concatenation
                        (ERROR
                          (constant_expression
                            (constant_primary))
                          (simple_identifier))
                        (constant_expression
                          (constant_expression
                            (constant_primary
                              (constant_mintypmax_expression
                                (constant_expression
                                  (constant_primary
                                    (parameter_identifier
                                      (simple_identifier)))))))
                          (constant_expression
                            (constant_primary
                              (primary_literal
                                (integral_number
                                  (decimal_number
                                    (unsigned_number)))))))
                        (constant_concatenation
                          (constant_expression
                            (constant_primary
                              (primary_literal
                                (integral_number
                                  (binary_number)))))))))))))))))
  (module_declaration
    (module_ansi_header
      (module_keyword)
      name: (simple_identifier))))

(ERROR)
