============================================
sv-tests/chapter-24/24.3--program
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: program_construct
:description: program construct test
:tags: 24.3
:type: simulation elaboration parsing
:unsynthesizable: 1
*/
program prog(input wire a, input wire b);
	initial $display(":assert: (%d == %d)", a, b);
endprogram

module top();

   wire a = 1;
   wire b = 1;

   prog p(a, b);

endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))
              (ERROR
                (simple_identifier))
              (list_of_arguments
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))
                (ERROR
                  (simple_identifier))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)))))
              (ERROR
                (simple_identifier))))))))
  (ERROR
    (simple_identifier))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (system_tf_call
              (system_tf_identifier)
              (list_of_arguments
                (expression
                  (primary
                    (primary_literal
                      (string_literal))))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)))))))))))
  (package_or_generate_item_declaration
    (net_declaration
      (simple_identifier)
      (list_of_net_decl_assignments
        (net_decl_assignment
          (simple_identifier)))))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))))))))
  (package_or_generate_item_declaration
    (net_declaration
      (net_type)
      (list_of_net_decl_assignments
        (net_decl_assignment
          (simple_identifier)
          (expression
            (primary
              (primary_literal
                (integral_number
                  (decimal_number
                    (unsigned_number))))))))))
  (package_or_generate_item_declaration
    (net_declaration
      (net_type)
      (list_of_net_decl_assignments
        (net_decl_assignment
          (simple_identifier)
          (expression
            (primary
              (primary_literal
                (integral_number
                  (decimal_number
                    (unsigned_number))))))))))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))
              (ERROR
                (simple_identifier))
              (list_of_arguments
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier))))
                (expression
                  (primary
                    (hierarchical_identifier
                      (simple_identifier)))))))))))
  (ERROR
    (simple_identifier)))

(ERROR)
