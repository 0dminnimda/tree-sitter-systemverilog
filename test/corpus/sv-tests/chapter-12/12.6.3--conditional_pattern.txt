============================================
sv-tests/chapter-12/12.6.3--conditional_pattern
============================================

// Copyright (C) 2019-2021  The SymbiFlow Authors.
//
// Use of this source code is governed by a ISC-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/ISC
//
// SPDX-License-Identifier: ISC


/*
:name: conditional_pattern
:description: A module testing pattern matching in conditional expressions
:tags: 12.6.3
*/
module case_tb ();

	typedef union tagged {
		struct {
			bit [3:0] val1, val2;
		} a;
		struct {
			bit [7:0] val1, val2;
		} b;
		struct {
			bit [15:0] val1, val2;
		} c;
	} u;

	u tmp;

	bit [3:0] val;

	initial begin
          val = tmp matches tagged a '{4'b01zx, .v} ? 1 : 2;
	end
endmodule

----

(source_file
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (comment)
  (ERROR
    (module_ansi_header
      (module_keyword)
      name: (simple_identifier)
      (list_of_port_declarations))
    (simple_identifier)
    (simple_identifier)
    (simple_identifier)
    (expression
      (primary
        (hierarchical_identifier
          (simple_identifier))))
    (concatenation
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))
          (select1
            (constant_range
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))))))
      (ERROR
        (simple_identifier))
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))
      (ERROR))
    (simple_identifier))
  (statement_or_null)
  (ERROR
    (simple_identifier)
    (concatenation
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))
          (select1
            (constant_range
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))))))
      (ERROR
        (simple_identifier))
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))
      (ERROR)))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))))))))
  (ERROR
    (simple_identifier)
    (concatenation
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))
          (select1
            (constant_range
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))))))
      (ERROR
        (simple_identifier))
      (expression
        (primary
          (hierarchical_identifier
            (simple_identifier))))
      (ERROR)))
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))))))))
  (ERROR)
  (statement_or_null
    (statement
      (statement_item
        (subroutine_call_statement
          (subroutine_call
            (tf_call
              (hierarchical_identifier
                (simple_identifier))))))))
  (package_or_generate_item_declaration
    (data_declaration
      (data_type_or_implicit1
        (data_type
          (simple_identifier)))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)))))
  (package_or_generate_item_declaration
    (data_declaration
      (data_type_or_implicit1
        (data_type
          (integer_vector_type)
          (packed_dimension
            (constant_range
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))
              (constant_expression
                (constant_primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))))))
      (list_of_variable_decl_assignments
        (variable_decl_assignment
          (simple_identifier)))))
  (package_or_generate_item_declaration
    (net_declaration
      (simple_identifier)
      (list_of_net_decl_assignments
        (net_decl_assignment
          (simple_identifier)
          (ERROR
            (simple_identifier))
          (expression
            (conditional_expression
              (cond_predicate
                (cond_pattern
                  (expression
                    (primary
                      (hierarchical_identifier
                        (simple_identifier))))
                  (pattern
                    (member_identifier
                      (simple_identifier))
                    (pattern
                      (pattern
                        (constant_expression
                          (constant_primary
                            (primary_literal
                              (integral_number
                                (binary_number))))))
                      (pattern
                        (simple_identifier))))))
              (expression
                (primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))
              (expression
                (primary
                  (primary_literal
                    (integral_number
                      (decimal_number
                        (unsigned_number))))))))))))
  (package_or_generate_item_declaration
    (net_declaration
      (simple_identifier)
      (list_of_net_decl_assignments
        (net_decl_assignment
          (simple_identifier))))))

(ERROR)
