============================================
base/always -- seq_block
============================================

module a_l ();

always begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (seq_block)))))))

============================================
base/always -- @*
============================================

module a ();

always @* begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control)
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))

============================================
base/always -- @(*)
============================================

module a ();

always @(*) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control)
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))

============================================
base/always -- @(posedge clk)
============================================

module a ();

always @(posedge clk) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (edge_identifier)
                        (expression
                          (primary
                            (hierarchical_identifier
                              (simple_identifier)))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))



============================================
base/always -- @(posedge clk or negedge rst_n)
============================================

module a ();

always @(posedge clk or negedge rst_n) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (edge_identifier)
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier)))))
                        (event_expression
                          (edge_identifier)
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))


============================================
base/always -- @(posedge clk, negedge rst_n)
============================================

module a ();

always @(posedge clk, negedge rst_n) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (edge_identifier)
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier)))))
                        (event_expression
                          (edge_identifier)
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))


============================================
base/always -- @(posedge clk or negedge rst_n or signal)
============================================

module a ();

always @(posedge clk or negedge rst_n or signal) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (event_expression
                            (edge_identifier)
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier)))))
                          (event_expression
                            (edge_identifier)
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))
                        (event_expression
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))


============================================
base/always -- @(posedge clk, negedge rst_n, signal)
============================================

module a ();

always @(posedge clk, negedge rst_n, signal) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (event_expression
                            (edge_identifier)
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier)))))
                          (event_expression
                            (edge_identifier)
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))
                        (event_expression
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))

============================================
base/always -- @(comb1 or comb2 or comb3 or comb4)
============================================

module a ();

always @(comb1 or comb2 or comb3 or comb4) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (event_expression
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier)))))
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))))
                          (event_expression
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))
                        (event_expression
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))


============================================
base/always -- @(comb1, comb2, comb3, comb4)
============================================

module a ();

always @(comb1, comb2, comb3, comb4) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (event_expression
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier)))))
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))))
                          (event_expression
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))
                        (event_expression
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))


============================================
base/always -- all
============================================

module abc ();

always begin end
always_ff begin end
always_comb begin end
always_latch begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (seq_block)))))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (seq_block)))))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (seq_block)))))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (seq_block)))))))

============================================
base/always -- if begin end
============================================

module abc ();

always_comb
if (a) begin
  a = b;
end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (conditional_statement
                  (cond_predicate
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block
                          (statement_or_null
                            (statement
                              (statement_item
                                (blocking_assignment
                                  (operator_assignment
                                    (variable_lvalue
                                      (hierarchical_identifier
                                        (simple_identifier)))
                                    (assignment_operator)
                                    (expression
                                      (primary
                                        (hierarchical_identifier
                                          (simple_identifier))))))))))))))))))))

============================================
base/always -- if
============================================

module abc ();

always_comb
if (foo)
  bar = baz;

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (conditional_statement
                  (cond_predicate
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (blocking_assignment
                          (operator_assignment
                            (variable_lvalue
                              (hierarchical_identifier
                                (simple_identifier)))
                            (assignment_operator)
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))))))))))))

============================================
base/always -- case
============================================

module abc ();

always_comb
case ( foo )
  8'h00, 8'h05: bar <= 1'b0;
  default       bar <= 1;
endcase

endmodule

----

(source_file (module_declaration
  (module_header (module_keyword) (simple_identifier))
  (module_nonansi_header (list_of_ports))
  (module_or_generate_item
    (always_construct (always_keyword)
      (statement (statement_item (case_statement (case_keyword)
        (case_expression (expression (primary (simple_identifier))))
        (case_item
          (case_item_expression (expression (primary (primary_literal (integral_number (hex_number))))))
          (case_item_expression (expression (primary (primary_literal (integral_number (hex_number))))))
          (statement_or_null (statement
            (statement_item
              (nonblocking_assignment
                (variable_lvalue (simple_identifier))
                (expression (primary (primary_literal (integral_number (binary_number))))))))))
        (case_item
          (statement_or_null (statement
            (statement_item
              (nonblocking_assignment
                (variable_lvalue (simple_identifier))
                (expression (primary (primary_literal (integral_number (decimal_number (unsigned_number))))))))))))))))))

============================================
base/always -- seq_block
============================================

module a_l ();

always @(a or b or c or d) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (event_expression
                          (event_expression
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier)))))
                            (event_expression
                              (expression
                                (primary
                                  (hierarchical_identifier
                                    (simple_identifier))))))
                          (event_expression
                            (expression
                              (primary
                                (hierarchical_identifier
                                  (simple_identifier))))))
                        (event_expression
                          (expression
                            (primary
                              (hierarchical_identifier
                                (simple_identifier))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))

============================================
base/always -- never block
============================================

module foo ();

always @(posedge 1'd0) begin end

endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (procedural_timing_control_statement
                  (event_control
                    (clocking_event
                      (event_expression
                        (edge_identifier)
                        (expression
                          (primary
                            (primary_literal
                              (integral_number
                                (decimal_number))))))))
                  (statement_or_null
                    (statement
                      (statement_item
                        (seq_block)))))))))))

============================================
base/always -- member
============================================

module mod ();
  always_comb foo = bar.baz;
endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (blocking_assignment
                  (operator_assignment
                    (variable_lvalue
                      (hierarchical_identifier
                        (simple_identifier)))
                    (assignment_operator)
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)
                          (simple_identifier))))))))))))

============================================
base/always -- member slice
============================================

module mod ();
  always_comb foo = bar.baz[7:0];
endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (blocking_assignment
                  (operator_assignment
                    (variable_lvalue
                      (hierarchical_identifier
                        (simple_identifier)))
                    (assignment_operator)
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))
                        (select1
                          (member_identifier
                            (simple_identifier))
                          (constant_range
                            (constant_expression
                              (constant_primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))
                            (constant_expression
                              (constant_primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))))))))))))))

============================================
base/always -- member nested
============================================

module mod ();
  always_comb foo = bar.baz.bat;
endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (blocking_assignment
                  (operator_assignment
                    (variable_lvalue
                      (hierarchical_identifier
                        (simple_identifier)))
                    (assignment_operator)
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier)
                          (simple_identifier)
                          (simple_identifier))))))))))))

============================================
base/always -- member nested slice
============================================

module mod ();
  always_comb foo = bar.baz.bat[7:0];
endmodule

----

    (source_file
      (module_declaration
        (module_nonansi_header
          (module_keyword)
          (simple_identifier)
          (list_of_ports))
        (module_or_generate_item
          (always_construct
            (always_keyword)
            (statement
              (statement_item
                (blocking_assignment
                  (operator_assignment
                    (variable_lvalue
                      (hierarchical_identifier
                        (simple_identifier)))
                    (assignment_operator)
                    (expression
                      (primary
                        (hierarchical_identifier
                          (simple_identifier))
                        (select1
                          (member_identifier
                            (simple_identifier))
                          (member_identifier
                            (simple_identifier))
                          (constant_range
                            (constant_expression
                              (constant_primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))
                            (constant_expression
                              (constant_primary
                                (primary_literal
                                  (integral_number
                                    (decimal_number
                                      (unsigned_number))))))))))))))))))
